Name: Joseph Jinn
Date: 2-15-19
Course: CS-344 Artificial Intelligence
Instructor: Professor Keith VanderLinden
Assignment: Lab03 - Constraint Satisfaction

Questions and Answers:
============================================================================================================
============================================================================================================


============================================================================================================
Exercise 3.1
Pull sudoku.py and try running each of the algorithms on each of the predefined sudoku puzzles. Consider the following questions:
============================================================================================================


============================================
Which algorithms work (in a timely manner) and which donâ€™t? Explain your results in terms of the capabilities (and implementations) of the algorithms and nature of the problems.
============================================
Note: I'm not overly familiar with the rules of Sudoku!

Sudoku:

https://sudoku.com/

Each row and column across the entire game board must be a unique number.
Each 3x3 section must contain all the digits between 1 and 9.

************************************

Depth-first Search algorithm: Explores from an initial root node as far as possible before backtracking.

Consistently tries and simply continues trying to find a solution for all the versions.
Never actually fails (or I didn't bother waiting long enough)

There's 9 digits that can be used and X positions on the board to place your first digit for your first move.
So, exploring each initial move as far as possible before backtracking would understandably take a very very long time.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
. . 3 | . 2 . | 6 . .
9 . . | 3 . 5 | . . 1
. . 1 | 8 . 6 | 4 . .
------+-------+------
. . 8 | 1 . 2 | 9 . .
7 . . | . . . | . . 8
. . 6 | 7 . 8 | 2 . .
------+-------+------
. . 2 | 6 . 9 | 5 . .
8 . . | 2 . 3 | . . 9
. . 5 | . 1 . | 3 . .

Process finished with exit code -1


************************************

AC3 (arc-consistency) algorithm: 

Consistently finds a solution for the easy version.
Consistently fails to find a solution for the harder and hardest versions.

Arc consistency considers only pairs of states whereas sudoku involves a lot more consideration than just pairs of states.
Need to check for unique digits in each row/column that consists of 9 spaces and in each 3x3 section across the 9x9 board.
So, might work for boards that are close to complete state formulation but not so much those those that are nearly empty.
Thus, it works for the Zebra problem, but not for Sudoku.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
4 1 7 | 3 6 9 | 8 . 5
. 3 . | . . . | . . .
. . . | 7 . . | . . .
------+-------+------
. 2 . | . . . | . 6 .
. . . | . 8 . | 4 . .
. . . | . 1 . | . . .
------+-------+------
. . . | 6 . 3 | . 7 .
5 . . | 2 . . | . . .
1 . 4 | . . . | . . .
Failed - domains: {0: ['4'], 1: ['1'], 2: ['7'], 9: ['3'], 10: ['6'], 11: ['9'], 18: ['8'], 19: ['2'], 20: ['5'], 3: ['2', '6', '8', '9'], 4: ['3'], 5: ['2', '5', '6', '8', '9'], 12: ['1', '4', '5', '8'], 13: ['2', '4', '5'], 14: ['1', '2', '4', '5', '8'], 21: ['1', '6', '7', '9'], 22: ['1', '4', '9'], 23: ['1', '4', '6', '7', '9'], 6: ['2', '6', '8', '9'], 7: ['5', '6', '8', '9'], 8: ['2', '5', '6', '8', '9'], 15: ['7'], 16: ['2', '4', '5'], 17: ['1', '2', '4', '5', '8'], 24: ['1', '3', '6', '9'], 25: ['1', '3', '4', '9'], 26: ['1', '3', '4', '6', '9'], 27: ['3', '7', '8', '9'], 28: ['2'], 29: ['1', '3', '5', '8', '9'], 36: ['4', '5', '9'], 37: ['3', '4', '5', '7', '9'], 38: ['4', '5', '7'], 45: ['1', '3', '5', '7', '9'], 46: ['6'], 47: ['1', '3', '7', '8', '9'], 30: ['3', '6', '7', '9'], 31: ['5', '6', '7', '9'], 32: ['1', '3', '5', '6', '9'], 39: ['5', '9'], 40: ['8'], 41: ['2', '5', '6', '7'], 48: ['4'], 49: ['1', '3', '5', '9'], 50: ['1', '2', '3', '7', '9'], 33: ['3', '6', '7', '8', '9'], 34: ['4', '5', '6', '7', '8', '9'], 35: ['3', '5', '6', '8', '9'], 42: ['4', '5', '9'], 43: ['1'], 44: ['2', '4', '5', '6', '7'], 51: ['2', '3', '5', '7', '9'], 52: ['3', '5', '8', '9'], 53: ['2', '3', '7', '8', '9'], 54: ['2', '8', '9'], 55: ['8', '9'], 56: ['2', '8', '9'], 63: ['6'], 64: ['4', '5', '9'], 65: ['3'], 72: ['1', '2', '5', '9'], 73: ['7'], 74: ['1', '2', '4', '8', '9'], 57: ['5'], 58: ['6', '7', '8', '9'], 59: ['3', '6', '8', '9'], 66: ['2'], 67: ['4', '7', '9'], 68: ['1', '4', '7', '8'], 75: ['1', '3', '6', '9'], 76: ['1', '3', '4', '8', '9'], 77: ['1', '3', '4', '6', '8', '9'], 60: ['1'], 61: ['6', '7', '8', '9'], 62: ['4'], 69: ['5', '8', '9'], 70: ['5', '7', '9'], 71: ['5', '7', '8'], 78: ['2', '3', '5', '6', '9'], 79: ['3', '5', '8', '9'], 80: ['2', '3', '6', '8', '9']}
4 1 7 | 3 6 9 | 8 2 5
. 3 . | . . . | . . .
. . . | 7 . . | . . .
------+-------+------
. 2 . | . . . | . 6 .
. . . | . 8 . | 4 . .
. . . | . 1 . | . . .
------+-------+------
. . . | 6 . 3 | . 7 .
5 . . | 2 . . | . . .
1 . 4 | . . . | . . .

Process finished with exit code 0

************************************

Back-tracking search algorithm:

Took a little while to find a solution for the easy version.
Will only take longer to find a solution for the harder and hardest version, I assume (I'm not going to leave it running for X minutes/hours).

This algorithm is essentially depth-first search with a heuristic function, hence it is faster than just depth-first search as the heuristic allows the algorithm
to prune from the search tree those partial candidates that cannot possibly lead to a solution.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
. . 3 | . 2 . | 6 . .
9 . . | 3 . 5 | . . 1
. . 1 | 8 . 6 | 4 . .
------+-------+------
. . 8 | 1 . 2 | 9 . .
7 . . | . . . | . . 8
. . 6 | 7 . 8 | 2 . .
------+-------+------
. . 2 | 6 . 9 | 5 . .
8 . . | 2 . 3 | . . 9
. . 5 | . 1 . | 3 . .
Solution:
4 8 3 | 9 2 1 | 6 5 7
9 6 7 | 3 4 5 | 8 2 1
2 5 1 | 8 7 6 | 4 9 3
------+-------+------
5 4 8 | 1 3 2 | 9 7 6
7 2 9 | 5 6 4 | 1 3 8
1 3 6 | 7 9 8 | 2 4 5
------+-------+------
3 7 2 | 6 8 9 | 5 1 4
8 1 4 | 2 5 3 | 7 6 9
6 9 5 | 4 1 7 | 3 8 2

Process finished with exit code 0

************************************

Min-conflict algorithm:

Fails to find a solution for the easy version after a while.
I will assume it will also fail to find a solution for the harder and hardest version.

This algorithm relies on complete state formulation as per local search and the sudoku boards give aren't in a state of complete formulation.
Hence, it is unsurprising it will fail unless we assign values to all the empty positions on the game board.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
. . 3 | . 2 . | 6 . .
9 . . | 3 . 5 | . . 1
. . 1 | 8 . 6 | 4 . .
------+-------+------
. . 8 | 1 . 2 | 9 . .
7 . . | . . . | . . 8
. . 6 | 7 . 8 | 2 . .
------+-------+------
. . 2 | 6 . 9 | 5 . .
8 . . | 2 . 3 | . . 9
. . 5 | . 1 . | 3 . .
Failed - domains: {0: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 1: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 2: ['3'], 9: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 10: ['2'], 11: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 18: ['6'], 19: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 20: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 3: ['9'], 4: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 5: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 12: ['3'], 13: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 14: ['5'], 21: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 22: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 23: ['1'], 6: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 7: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 8: ['1'], 15: ['8'], 16: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 17: ['6'], 24: ['4'], 25: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 26: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 27: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 28: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 29: ['8'], 36: ['1'], 37: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 38: ['2'], 45: ['9'], 46: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 47: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 30: ['7'], 31: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 32: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 39: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 40: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 41: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 48: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 49: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 50: ['8'], 33: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 34: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 35: ['6'], 42: ['7'], 43: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 44: ['8'], 51: ['2'], 52: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 53: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 54: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 55: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 56: ['2'], 63: ['6'], 64: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 65: ['9'], 72: ['5'], 73: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 74: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 57: ['8'], 58: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 59: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 66: ['2'], 67: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 68: ['3'], 75: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 76: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 77: ['9'], 60: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 61: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 62: ['5'], 69: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 70: ['1'], 71: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 78: ['3'], 79: ['1', '2', '3', '4', '5', '6', '7', '8', '9'], 80: ['1', '2', '3', '4', '5', '6', '7', '8', '9']}
. . 3 | . 2 . | 6 . .
9 . . | 3 . 5 | . . 1
. . 1 | 8 . 6 | 4 . .
------+-------+------
. . 8 | 1 . 2 | 9 . .
7 . . | . . . | . . 8
. . 6 | 7 . 8 | 2 . .
------+-------+------
. . 2 | 6 . 9 | 5 . .
8 . . | 2 . 3 | . . 9
. . 5 | . 1 . | 3 . .

Process finished with exit code 0

============================================
What effect does configuring the settings for backtracking have on the results? Try the following:
============================================

Note: I assume I am correctly doing this in modifying the csp.py file and the backtrack_search function.

With the default first_unassigned_variable (easy version):

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
. . 3 | . 2 . | 6 . .
9 . . | 3 . 5 | . . 1
. . 1 | 8 . 6 | 4 . .
------+-------+------
. . 8 | 1 . 2 | 9 . .
7 . . | . . . | . . 8
. . 6 | 7 . 8 | 2 . .
------+-------+------
. . 2 | 6 . 9 | 5 . .
8 . . | 2 . 3 | . . 9
. . 5 | . 1 . | 3 . .
Solution:
4 8 3 | 9 2 1 | 6 5 7
9 6 7 | 3 4 5 | 8 2 1
2 5 1 | 8 7 6 | 4 9 3
------+-------+------
5 4 8 | 1 3 2 | 9 7 6
7 2 9 | 5 6 4 | 1 3 8
1 3 6 | 7 9 8 | 2 4 5
------+-------+------
3 7 2 | 6 8 9 | 5 1 4
8 1 4 | 2 5 3 | 7 6 9
6 9 5 | 4 1 7 | 3 8 2
time elapsed is: 68.39392614364624

Process finished with exit code 0

============================================
Set the variable/value ordering (i.e., the select_unassigned_variable parameter) to first-unassigned-variable (the default) or minimum-remaining-values (i.e., mrv).
============================================

Assuming I did this correctly, it doesn't seems to make a whole lot of difference.  It still takes a while to find a solution to the easy version.
So, I assume it will still take even longer to find a solution to the harder and hardest version.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
. . 3 | . 2 . | 6 . .
9 . . | 3 . 5 | . . 1
. . 1 | 8 . 6 | 4 . .
------+-------+------
. . 8 | 1 . 2 | 9 . .
7 . . | . . . | . . 8
. . 6 | 7 . 8 | 2 . .
------+-------+------
. . 2 | 6 . 9 | 5 . .
8 . . | 2 . 3 | . . 9
. . 5 | . 1 . | 3 . .
Solution:
4 8 3 | 9 2 1 | 6 5 7
9 6 7 | 3 4 5 | 8 2 1
2 5 1 | 8 7 6 | 4 9 3
------+-------+------
5 4 8 | 1 3 2 | 9 7 6
7 2 9 | 5 6 4 | 1 3 8
1 3 6 | 7 9 8 | 2 4 5
------+-------+------
3 7 2 | 6 8 9 | 5 1 4
8 1 4 | 2 5 3 | 7 6 9
6 9 5 | 4 1 7 | 3 8 2
time elapsed is: 63.56984519958496

Process finished with exit code 0

============================================
Set the inference (i.e., the inference parameter) to forward-checking (i.e., forward_checking).
============================================

With default first_unassigned_variable and forward_checking (hardest version):

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
1 . . | . . 7 | . 9 .
. 3 . | . 2 . | . . 8
. . 9 | 6 . . | 5 . .
------+-------+------
. . 5 | 3 . . | 9 . .
. 1 . | . 8 . | . . 2
6 . . | . . 4 | . . .
------+-------+------
3 . . | . . . | . 1 .
. 4 . | . . . | . . 7
. . 7 | . . . | 3 . .
Solution:
1 6 2 | 8 5 7 | 4 9 3
5 3 4 | 1 2 9 | 6 7 8
7 8 9 | 6 4 3 | 5 2 1
------+-------+------
4 7 5 | 3 1 2 | 9 8 6
9 1 3 | 5 8 6 | 7 4 2
6 2 8 | 7 9 4 | 1 3 5
------+-------+------
3 5 6 | 4 7 8 | 2 1 9
2 4 1 | 9 3 5 | 8 6 7
8 9 7 | 2 6 1 | 3 5 4
time elapsed is: 0.6973006725311279

Process finished with exit code 0

************************************

With mrv and forward_checking (hardest version):

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/sudoku.py
Start:
1 . . | . . 7 | . 9 .
. 3 . | . 2 . | . . 8
. . 9 | 6 . . | 5 . .
------+-------+------
. . 5 | 3 . . | 9 . .
. 1 . | . 8 . | . . 2
6 . . | . . 4 | . . .
------+-------+------
3 . . | . . . | . 1 .
. 4 . | . . . | . . 7
. . 7 | . . . | 3 . .
Solution:
1 6 2 | 8 5 7 | 4 9 3
5 3 4 | 1 2 9 | 6 7 8
7 8 9 | 6 4 3 | 5 2 1
------+-------+------
4 7 5 | 3 1 2 | 9 8 6
9 1 3 | 5 8 6 | 7 4 2
6 2 8 | 7 9 4 | 1 3 5
------+-------+------
3 5 6 | 4 7 8 | 2 1 9
2 4 1 | 9 3 5 | 8 6 7
8 9 7 | 2 6 1 | 3 5 4
time elapsed is: 0.12595820426940918

Process finished with exit code 0

============================================
Which, if any, of these settings should work best for sudoku? What combination of settings actually works the best?
============================================

It seems that turning on forward_checking is a must in order to find these solutions in a timely manner.
With forward_checking turned on and mrv turned on, it is the fastest at finding a solution to the hardest version.

============================================================================================================
Exercise 3.2
Pull queens.py and try running each of the algorithms with various values for n. Answer the following questions:
============================================================================================================

Note: Skipping the depth-first search algorithm as you mentioned there is a bug and to do so.

============================================
How large can n get for each of the algorithms? Why?
============================================

AC3 (arc-consistency) algorithm:

Always fails to find a solution no matter the N-size.
Used default of 4 and up to 160.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/queens.py
AC Failure:
{0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], 1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 
time elapsed: 5.158927917480469

Process finished with exit code 0

************************************

Backtracking search algorithm:

Always successfully finds a solution insofar as I can tell.
Used default of 4 up to 24.
After 24, it's going to take longer and longer to find a solution.

Note: currently using default settings of first_unassigned_variable and no_inference

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/queens.py
Solution:
{0: 0, 1: 2, 2: 4, 3: 1, 4: 3, 5: 8, 6: 10, 7: 13, 8: 20, 9: 18, 10: 21, 11: 19, 12: 17, 13: 23, 14: 9, 15: 22, 16: 5, 17: 7, 18: 15, 19: 6, 20: 12, 21: 14, 22: 16, 23: 11}
time elapsed: 18.292604684829712

Process finished with exit code 0

************************************

Min-conflicts algorithm:

Always successfully finds a solution speedily insofar as I can tell.
Used default of 4 up to 2048.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/queens.py
Solution:
{0: 768, 1: 1728, 2: 1011, 3: 1200, 4: 138, 5: 310, 6: 558, 7: 793, 8: 115, 9: 241, 10: 1563, 11: 1064, 12: 209, 13: 1118, 14: 1599, 15: 1807, 16: 1354, 17: 526, 18: 987, 19: 1848, 20: 638, 21: 1600, 22: 1912, 23: 247, 24: 626, 25: 1247, 26: 1472, 27: 1744, 28: 1931, 29: 832, 30: 474, 31: 1050, 32: 38, 33: 734, 34: 1100, 35: 1385, 36: 1771, 37: 1198, 38: 1378, 39: 1101, 40: 1181, 41: 1460, 42: 561, 43: 616, 44: 1522, 45: 1114, 46: 2031, 47: 1534, 48: 58, 49: 863, 50: 1927, 51: 726, 52: 1714, 53: 128, 54: 1892, 55: 1183, 56: 758, 57: 1177, 58: 1711, 59: 
time elapsed: 10.042539358139038

Process finished with exit code 0

============================================
What backtracking settings work the best? Why?
============================================

Using first_unassigned_variable and forward_checking:
From 4 to 20.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/queens.py
Solution:
{0: 0, 1: 2, 2: 4, 3: 1, 4: 3, 5: 12, 6: 14, 7: 11, 8: 17, 9: 19, 10: 16, 11: 8, 12: 15, 13: 18, 14: 7, 15: 9, 16: 6, 17: 13, 18: 5, 19: 10}
time elapsed: 3.627915620803833

Process finished with exit code 0

************************************

Using mrv and forward_checking:
From 4 to 180.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/queens.py
Solution:
{159: 0, 14: 1, 96: 2, 136: 3, 8: 4, 74: 5, 178: 6, 45: 7, 38: 8, 82: 9, 56: 10, 33: 11, 113: 12, 27: 13, 109: 14, 122: 15, 121: 17, 93: 16, 152: 18, 59: 19, 158: 20, 157: 22, 131: 21, 135: 23, 175: 24, 73: 26, 172: 25, 142: 27, 168: 28, 164: 34, 177: 29, 77: 33, 79: 36, 179: 30, 78: 39, 67: 35, 54: 31, 97: 32, 30: 37, 31: 40, 34: 38, 21: 41, 20: 43, 25: 44, 149: 46, 22: 48, 127: 45, 44: 42, 32: 49, 116: 50, 5: 51, 9: 52, 1: 53, 6: 47, 103: 54, 107: 55, 0: 57, 110: 65, 39: 61, 102: 66, 108: 73, 98: 56, 3: 62, 2: 58, 18: 69, 19: 63, 42: 70, 120: 60, 35: 59, 52: 64, 23: 72, 24: 77, 4: 71, 26: 80, 41: 78, 83: 67, 112: 75, 46: 76, 37: 68, 125: 91, 124: 83, 117: 84, 51: 85, 43: 81, 48: 87, 90: 92, 87: 86, 12: 95, 7: 82, 10: 74, 91: 94, 94: 89, 148: 90, 99: 93, 145: 88, 114: 96, 144: 113, 139: 110, 138: 79, 141: 114, 133: 107, 134: 109, 155: 99, 160: 98, 170: 100, 174: 102, 173: 105, 176: 97, 167: 104, 119: 108, 171: 116, 169: 115, 166: 138, 162: 101, 111: 103, 165: 112, 126: 106, 147: 128, 115: 120, 132: 129, 130: 118, 163: 139, 156: 135, 123: 123, 154: 144, 161: 111, 153: 136, 128: 119, 151: 152, 146: 154, 129: 122, 118: 124, 150: 160, 143: 156, 140: 125, 100: 121, 137: 148, 106: 131, 105: 134, 104: 137, 86: 126, 89: 147, 84: 145, 68: 140, 66: 153, 92: 142, 71: 133, 101: 117, 72: 141, 70: 130, 63: 157, 85: 159, 69: 146, 65: 158, 76: 149, 81: 169, 64: 164, 58: 166, 57: 174, 60: 151, 50: 176, 49: 127, 61: 132, 53: 150, 36: 155, 55: 167, 47: 143, 62: 168, 40: 165, 29: 173, 28: 161, 13: 175, 17: 177, 11: 163, 16: 170, 15: 162, 75: 178, 88: 172, 80: 179, 95: 171}
time elapsed: 2.5935802459716797

Process finished with exit code 0

************************************

Using mrv and no_inference:
From 4 to 61.
Interestingly, some numbers are fast and find solutions while others are slow and keep trying.

D:\Dropbox\CS_344\venv\Scripts\python.exe D:/Dropbox/CS_344/cs344/Labs/Lab03/queens.py
Solution:
{7: 0, 4: 1, 54: 2, 12: 3, 40: 4, 47: 5, 26: 6, 21: 7, 10: 8, 15: 9, 41: 10, 3: 11, 23: 12, 5: 14, 39: 15, 45: 13, 16: 17, 29: 16, 42: 19, 14: 20, 32: 27, 36: 21, 46: 18, 24: 23, 49: 22, 20: 30, 31: 31, 52: 26, 8: 28, 25: 38, 9: 32, 2: 24, 48: 29, 44: 36, 18: 25, 17: 43, 50: 33, 30: 35, 51: 39, 37: 48, 6: 34, 33: 37, 13: 40, 19: 50, 28: 53, 43: 46, 22: 51, 35: 47, 53: 49, 27: 41, 38: 54, 1: 45, 0: 42, 11: 44, 34: 52}
time elapsed: 0.05498242378234863

Process finished with exit code 0

************************************

It seems having mrv (minimum-remaining value) turned on is the key to speeding up this algorithm.
Well, choosing the minimum-remaining value heuristic means choosing the variable with the fewest legal values and thus the most conflicts.
So, there are fewer possibilities to explore before back-tracking and trying another variable.

So, it makes sense this would speed up the algorithm then choosing no_inference and possibly choosing a variable with the least conflicts, which
would lead to a lot of possibilities to explore before back-tracking.

============================================
How many steps does Min-Conflicts require to do its work?
============================================

It requires a minimum of n=4.

============================================================================================================
Exercise 3.3
Review the AIMA Python implementation for constraint satisfaction problems (CSP) as needed to do the following:
============================================================================================================

Note: There's a ton of code in csp.py and search.py. Going to just skim over them.

============================================
Compare and contrast the specifications for CSP (i.e., csp.CSP) and traditional problems (i.e., search.Problem). 
Be sure to consider the nature of states, domains, actions, results and goal tests.
============================================

The methods/functions for search.py are implemented as abstract methods/functions to be defined per algorithm.
The methods/functions for csp.py are implemented as a globally accessible method/function available to all algorithms.

Traditional searches are defined in terms of a node class and a search tree.
Constraint  satisfaction problems are not defined in terms of a node class and a search tree.

States:

CSP: Defines an initial state and transition states during the search.

Traditional: Defines an initial state and transition states during the search.

************************************

Domains:

CSP: A dictionary of variables and their values.

Traditional: Doesn't use domains.

************************************

Actions:

CSP: Defines applicable actions based on non-conflicting assignments to variables.

Traditional: Defines applicable actions based on the current state.

************************************

Results:

CSP: Defines results in terms of the action taken given the variable and value.

Traditional: Defines results in terms of the action taken given the current state.

************************************

Goal Tests:

CSP: Returns true or false based on checking whether all variables are assigned values with all constraints satisfied.

Traditional: Returns true or false based on checks of the current state against the defined goal state(s).

============================================
Compare and contrast the nature of the heuristics deployed in traditional and constraint-based problem solving.
============================================

CSP: Utilizes various methods of ordering the variables based on their associated values.

    mrv - minimum-remaining-values  
    lcv - least-constraining-values

Traditional: Utilizes various algorithms with built-in heuristic functions.

    -best first graph search
    -greedy best first graph search
    -A* search
    Manhattan heuristic function

============================================================================================================
============================================================================================================