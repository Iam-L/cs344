"""
Course: CS 344 - Artificial Intelligence
Instructor: Professor VanderLinden
Name: Joseph Jinn
Date: 5-3-19
Assignment: Lab 13 - Planning

Notes:

Exercise 13.1 - Do the following exercises.

Note: Prolog makes me cry.  Apparently, my brain isn't wired well for recursive logic.
"""

###########################################################################################

Do these exercises from LPN!.
Exercise 3.2
Exercise 4.5
Exercise 5.3

###########################################################################################
Does Prolog implement a version of generalized modus ponens? If so, demonstrate how it’s done; if not, explain why not.
If it doesn’t, can you implement one? Why or why not?

Yes, Prolog does implement a generalized version of modus ponens (resolution-refutation proofs)

Prolog takes the query that you are trying to prove and assumes the opposite (the negation of the statement).

Prolog then uses the Horn Clauses, which are a subset of conjunctive normal form, from the knowledge base to perform
unification.

Some terms in the Horn Clauses cancel out, resulting in a reduced clause with fewer terms.

Rinse and repeat.

Resolution eventually leads to the empty clause, which represents a contradiction.  Hence, the original query must be
true.

###########################################################################################
Have you ever seen anything similar to the “successor” rule discussed in LPN!’s Chapter 3.1, Example 3? Where?
What was it used for?

I vaguely remember in CS-212 Data Structures and Algorithms we had a Project involving Graph Algorithms where we had
to find the successor nodes in a Dutch family tree hierarchy.  It was a breadth-first search algorithm if I remember
correctly.  That project was one that was challenging to me and I never quite got backtracking to record the path of
node traversal to work with breadth-first search.

###########################################################################################
Be sure that you can explain how you built your system and how Prolog does recursion.

For lists, Prolog peels off the head of the list with each recursive call and passes the tail of the list to the next
recursive call.  This occurs until the query succeeds or the tail is just the empty list.

Prolog uses its standard inference mechanisms when dealing with recursive rules - rules where one or more statements
in the body of that rule calls upon itself.

There is a base case that is a fact or non-recursive rule which ends the recursion and prevents infinite recursion.

###########################################################################################