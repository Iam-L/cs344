"""
Course: CS 344 - Artificial Intelligence
Instructor: Professor VanderLinden
Name: Joseph Jinn
Date: 4-18-19
Assignment: Lab 13 - Planning

Notes:

Exercise 13.2 - Extend the LPN! exercises above as follows.
"""

###########################################################################################

Exercise 3.2 - Modify your code to print the containment hierarchy as shown here:
?- in(katarina, olga, L).
L = contains(katarina, olga)

?- in(katarina, irina, L).
L = contains(katarina, olga, contains(olga, natasha, contains(natasha, irina)))

These examples produce a “stack trace” of the recursive executation.
The first example is a base case, the second a recursive case.

###########################################################################################
Exercise 4.5 - Modify your code to translate into either English or Chinese.
The Chinese numbers are yi, er, san, si, wu, liu, qi, ba, jiu. Your output should look something like this:

?- listtran3([eins,zwei],2,X).
X = [one, two]

?- listtran3([eins,zwei],3,X).
X = [yi, er].

?- listtran3(X,3,[yi, er]).
X = [eins, zwei].

?- listtran3(X,2,[one, two]).
X = [eins, zwei].

Simple extensions of your original code will likely only support these language pairs;
you don’t need to support Chinese-English translations.

###########################################################################################
Exercise 5.3 - Add a new addN/3 predicate that adds an arbitrary value to each list element as specified
by a numeric parameter.

?- addN([1,2,3],2,X).
X = [3, 4, 5].

###########################################################################################
Save your program in lab_2.pl.
