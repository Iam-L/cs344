"""
Course: CS 344 - Artificial Intelligence
Instructor: Professor VanderLinden
Name: Joseph Jinn
Date: 3-31-19
Assignment: Lab 10 - Neural Networks

Notes:

Exercise 10.1 - Intro to Neural Networks

-Included code just to see if I can run it from within PyCharm and because it executes faster.
- Refer to sections below for answers to Exercise questions and code added for Tasks.
"""

###########################################################################################

"""
Task 1: Train a NN Model

Google Baselines:

Final RMSE (on training data):   216.02
Final RMSE (on validation data): 216.18
"""

# Train the model.
dnn_regressor = train_nn_regression_model(
    learning_rate=0.1,
    steps=250,
    batch_size=10,
    hidden_units=[10, 2],  # Create two hidden layers with 10 and 2 nodes, respectively.
    training_examples=training_examples,
    training_targets=training_targets,
    validation_examples=validation_examples,
    validation_targets=validation_targets)

"""
Task 2: Evaluate on Test Data

Code copied from Lab07_4.py and modified.
"""

# Make predictions using test dataset.
california_housing_test_data = pd.read_csv(
    "https://download.mlcc.google.com/mledu-datasets/california_housing_test.csv", sep=",")

test_examples = preprocess_features(california_housing_test_data)
test_targets = preprocess_targets(california_housing_test_data)

predict_test_input_function = lambda: my_input_fn(
    test_examples,
    test_targets["median_house_value"],
    num_epochs=1,
    shuffle=False)

test_predictions = dnn_regressor.predict(input_fn=predict_test_input_function)
test_predictions = np.array([item['predictions'][0] for item in test_predictions])

root_mean_squared_error = math.sqrt(
    metrics.mean_squared_error(test_predictions, test_targets))

print("Final RMSE (on test data): %0.2f" % root_mean_squared_error)

"""
Exercise 10.1 Questions:
###########################################################################################

Would you rather use TensorFlow or Keras to build your models?

I would like to user Tensorflow Keras for fast prototyping and then straight Tensorflow for the final implementation.

##################################################

Tasks 1 & 2: Report your best hyper-parameter settings and their resulting performance on the testing dataset.

# Train the model.
dnn_regressor = train_nn_regression_model(
    learning_rate=0.1,
    steps=250,
    batch_size=10,
    hidden_units=[10, 2],  # Create two hidden layers with 10 and 2 nodes, respectively.
    training_examples=training_examples,
    training_targets=training_targets,
    validation_examples=validation_examples,
    validation_targets=validation_targets)

Training model...
RMSE (on training data):
  period 00 : 226.27
  period 01 : 215.61
  period 02 : 205.16
  period 03 : 194.96
  period 04 : 185.03
  period 05 : 175.44
  period 06 : 166.23
  period 07 : 157.47
  period 08 : 149.25
  period 09 : 141.84
Model training finished.
Final RMSE (on training data):   141.84
Final RMSE (on validation data): 144.68
Final RMSE (on test data): 139.49

Process finished with exit code 0

##################################################
"""
