"""
Course: CS 344 - Artificial Intelligence
Instructor: Professor VanderLinden
Name: Joseph Jinn
Date: 4-18-19
Assignment: Lab 12 - Logic

Notes:

Exercise 12.2 - Read LPN! Chapter 2 and do the following exercises:
"""

###########################################################################################
Exercise 2.1, questions 1, 2, 8, 9, 14 - Give the necessary instantiations.
##################################################
My Guesses:

bread  =  bread --> unifies
’Bread’  =  bread --> will not unify
’bread’  =  bread --> unifies
Bread  =  bread --> will not unify
bread  =  sausage --> will not unify
food(bread)  =  bread --> will not unify
food(bread)  =  X --> will unify
food(X)  =  food(bread) --> will unify
food(bread,X)  =  food(Y,sausage) --> will unify
food(bread,X,beer)  =  food(Y,sausage,X) --> will not unify
food(bread,X,beer)  =  food(Y,kahuna_burger) --> will not unify
food(X)  =  X --> will unify
meal(food(bread),drink(beer))  =  meal(X,Y) --> will unify
meal(food(bread),X)  =  meal(X,drink(beer)) --> will not unify

##################################################
Prolog Results:

?- bread = bread.
true.

?- 'Bread' = bread.
false.

?- 'bread' = bread.
true.

?- Bread = bread.
Bread = bread.

?- bread = sausage.
false.

?- food(bread) = bread.
false.

?- food(bread) = X.
X = food(bread).

?- food(X) = food(bread).
X = bread.

?- food(bread,X) = food(Y,sausage).
X = sausage,
Y = bread.

?- food(bread,X,beer) = food(Y,sausage,X).
false.

?- food(bread,X,beer) = food(Y,kahuna_burger).
false.

?- food(X) = X.
X = food(X).

?- meal(food(bread),drink(beer)) = meal(X,Y).
X = food(bread),
Y = drink(beer).

?- meal(food(bread),X) = meal(X,drink(beer)).
false.

?-

##################################################
Variable instantiations:

bread  =  bread --> N/A
’Bread’  =  bread --> N/A
food(X)  =  food(bread) --> X = bread
food(bread,X)  =  food(Y,sausage) --> Y = bread, X = sausage.
meal(food(bread),X)  =  meal(X,drink(beer)) --> X = food(bread), X = drink(beer)

###########################################################################################
Exercise 2.2 - Explain how Prolog does its unification and reasoning. If you have issues getting the results
you’d expect, are there things you can do to game the system?

##################################################
Yes, I can game the system by inserting one extra line of code: wizard(gandalf).

##################################################
Prolog does its unification following these combination of rules:

If term1 and term2 are constants, then term1 and term2 unify if and only if they are the same atom, or the same number.

If term1 is a variable and term2 is any type of term, then term1 and term2 unify, and term1 is instantiated to term2 .
Similarly, if term2 is a variable and term1 is any type of term, then term1 and term2 unify, and term2 is instantiated
to term1 . (So if they are both variables, they’re both instantiated to each other, and we say that they share values.)

If term1 and term2 are complex terms, then they unify if and only if:

    They have the same functor and arity, and

    all their corresponding arguments unify, and

    the variable instantiations are compatible. (For example, it is not possible to instantiate variable X to mia when
    unifying one pair of arguments, and to instantiate X to vincent when unifying another pair of arguments .)

Two terms unify if and only if it follows from the previous three clauses that they unify.

##################################################
Prolog does its reasoning by following these steps:

Reads the knowledge base and attempts to unify the query with the first possible fact or head of a rule by searching
from the top to the bottom.

Creates new variables after unifying the variables in a query to a fact or rule to represent the shared variables.

Unification generates a list of goals, which Prolog attempts to satisfy from working through them left to right.

Rinse and repeat.

If cannot unify with all goals, Prolog backtracks and attempts to find alternative unification via choice points.

Prolog stores and uses these choice points to backtrack whenever necessary, after hitting a dead end that does not
satisfy all goals.

Once Prolog reaches a empty goal list, the query succeeded.  Otherwise, fail.

##################################################

house_elf(dobby).
witch(hermione).
witch(’McGonagall’).
witch(rita_skeeter).
magic(X):-  house_elf(X).
magic(X):-  wizard(X).
magic(X):-  witch(X).

Which of the following queries are satisfied? Where relevant, give all the variable instantiations that lead to success.

?-  magic(house_elf).
?-  wizard(harry).
?-  magic(wizard).
?-  magic(’McGonagall’).
?-  magic(Hermione).

##################################################
My Guesses:

?-  magic(house_elf). --> FALSE
?-  wizard(harry). --> FALSE (undefined)
?-  magic(wizard). --> FALSE
?-  magic(’McGonagall’). -->  TRUE
?-  magic(Hermione). --> TRUE

##################################################
Prolog results:

?- magic(house_elf).
ERROR: Undefined procedure: wizard/1
ERROR: In:
ERROR:    [9] wizard(house_elf)
ERROR:    [8] magic(house_elf) at d:/dropbox/cs344-ai/cs344/labs/lab12/lab_2.pl:6
ERROR:    [7] <user>
   Exception: (9) wizard(house_elf) ? creep
   Exception: (8) magic(house_elf) ? creep

?- wizard(harry).
ERROR: Undefined procedure: wizard/1 (DWIM could not correct goal)

?- magic(wizard).
ERROR: Undefined procedure: wizard/1
ERROR: In:
ERROR:    [9] wizard(wizard)
ERROR:    [8] magic(wizard) at d:/dropbox/cs344-ai/cs344/labs/lab12/lab_2.pl:6
ERROR:    [7] <user>
   Exception: (9) wizard(wizard) ? creep
   Exception: (8) magic(wizard) ? creep

?- magic('McGonagall').
ERROR: Undefined procedure: wizard/1
ERROR: In:
ERROR:    [9] wizard('McGonagall')
ERROR:    [8] magic('McGonagall') at d:/dropbox/cs344-ai/cs344/labs/lab12/lab_2.pl:6
ERROR:    [7] <user>
   Exception: (9) wizard('McGonagall') ? creep
   Exception: (8) magic('McGonagall') ? creep

?- magic(Hermione).
Hermione = dobby

Note: There are the exact results I obtained by running SWI-Prolog on the example's knowledge base with the queries.

##################################################
magic(Hermione). - the only successful query.

Variable instantiation leading to success:

Hermione = dobby

##################################################
Prolog Results (after inserting wizard(gandalf):

?- magic(house_elf).
false.

?- wizard(harry).
false.

?- magic(wizard).
false.

?- magic('McGonagall').
true.

?- magic(Hermione).
Hermione = dobby ;
Hermione = gandalf ;
Hermione = hermione ;
Hermione = 'McGonagall' ;
Hermione = rita_skeeter.

?-

##################################################
Successful queries:

magic('McGonagall').
magic(Hermione).

Variable instantiation leading to success:

Hermione = dobby ;
Hermione = gandalf ;
Hermione = hermione ;
Hermione = 'McGonagall' ;
Hermione = rita_skeeter.

##################################################
Draw the search tree for the query magic(Hermione) .

?- trace.
true.

[trace]  ?- magic(Hermione).
   Call: (8) magic(_10118) ? creep
   Call: (9) house_elf(_10118) ? creep
   Exit: (9) house_elf(dobby) ? creep
   Exit: (8) magic(dobby) ? creep
Hermione = dobby .

Note: It seems this was removed from lab 12 after I started, so I will forgo doing this and just use a trace.

###########################################################################################
Does inference in propositional logic use unification? Why or why not?

Modus Ponens is a rule of inference in propositional logic. (P --> Q)

Prolog uses Modus Ponens to represent propositional sentences. (head :- body)

Prolog uses unification in order to infer, so it's logical to conclude that inference in propositional logic uses
unification.

###########################################################################################
Does Prolog inferencing use resolution? Why or why not?

Resolution - inference mechanism where resolving two clauses creates a new one.

Yes, Prolog uses resolution for inference.

Example:

m :-b.
t :- p, m, z.

inference --> t :- p, b, z.


Resources Used: URL: https://athena.ecs.csus.edu/~logicp/unification-resolution.html

###########################################################################################
Save your program in lab_2.pl.